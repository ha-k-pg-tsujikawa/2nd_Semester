・仮想関数
virtual(何かしらの関数)
  ↓
継承先に同じ関数があればそちらを優先して呼び出す
	↓
処理を上書きできる
	↓
関数のオーバーライド

デストラクタ
virtual ~Base()
継承する可能性のあるクラスのデストラクタには、
必ずvirtualをつけなければならない


・純粋仮想関数	
    ↓
virtual 関数の宣言 = 0;
・Baseに実態は必要ない
・virtualとして継承先の関数を呼び出したい

Player→Exec()
	Draw()
Enemy→ Exec()		array[i]->Exec()
	Draw()	→	array[i]->Draw()
			数が増えてもこの2行でok
Base* array[] = 	
{			
   new Player
   new Enemy
}
	↓
配列の中に入るものが何であれ、同じように処理することができ、
処理の中身はそれぞれ別のものになる


・ポリモーフィズム
多様性
多態性　→　ものがその「モノ」らしくふるまう
多相性

例)
動物
鳴く()=0;
動物[0] = 鳴く();
処理の中身はそれぞれのクラスに任せる(動物によって鳴き方が違うから)

